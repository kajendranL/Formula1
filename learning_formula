import numpy as np

# r = Σ [ (xi - x)(yi - y) ] / Σ [ (xi - x)2Σ [ (yi - y)2]
class corelation:
    def __init__(self, x, y):
        self.x = y
        self.y = x

    def find_x_y(self):
        M = 0
        N = 0

        for i, j in zip(self.x, self.y):
            M += i  # add to the index of x[i]
            AvgM = M / len(self.x)  # find avg of x  (bar of x)

            N += j  # add to the index of y[i]
            AvgN = N / len(self.y)  # find avg of y (bar of y)

            # (x[i] - x bar)
        Xlist = []
        Ylist = []
        for i, j in zip(self.x, self.y):
            Xi = i - AvgM
            Xlist.append(Xi)  # (x - bar(x))
            Yi = j - AvgN
            Ylist.append(Yi)  # (y - bar(y))

        # Σ find sum of x and y

        sum_Xlist = 0
        sum_Ylist = 0

        for i, j in zip(Xlist, Ylist):
            sum_Xlist += 1
            sum_Ylist += 1

        # find Squareroot

        sqr_x = sum_Xlist ** 2
        sqr_y = sum_Ylist ** 2

        # r = Σ [ (xi - x)(yi - y) ] / Σ [ (xi - x)2Σ [ (yi - y)2]

        r = ((sum_Xlist * sum_Ylist) / (sqr_x * sqr_y ** 2))
        return r

    # m = r*Sy/Sx

    def slope_m(self):
        s_x = np.std(self.x)
        s_y = np.std(self.y)

        slope = self.find_x_y() * s_y / s_x

        return slope

    # b (bar (y) = y-mx (bar(x))

    def find_b(self):

        fb = np.mean(self.y) - self.slope_m() * np.mean(self.x)  # np.mean (to find avg in numpy)

        return fb

    # (bar(y)= m (bar (x)+ b))

    def prediction(self, new_x):
        new_y = self.slope_m() * np.mean(new_x) + self.find_b()
        return new_y


co = corelation([3, 4, 5], [6, 7, 8])
co1 = corelation([1,2,3],[3,4,5])
print(co.find_x_y())
print(co1.find_x_y())
print(co.slope_m())
print(co1.slope_m())
print(co.find_b())
print(co1.find_b())
print(co.prediction([3, 9, 10]))
print(co1.prediction([1,3,5]))


